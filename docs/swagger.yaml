definitions:
  dtos.MultiID:
    properties:
      ids:
        items:
          type: string
        type: array
    required:
    - ids
    type: object
  dtos.Response:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  models.Employee:
    properties:
      kpi:
        type: integer
      position:
        type: string
      salary:
        type: number
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  models.Feature:
    properties:
      feature:
        type: string
      featureID:
        type: integer
      isDeleted:
        type: boolean
    type: object
  models.Good:
    properties:
      count:
        type: integer
      description:
        type: string
      feature:
        items:
          $ref: '#/definitions/models.Feature'
        type: array
      goodID:
        type: integer
      isDeleted:
        type: boolean
      name:
        type: string
      price:
        type: number
      vendor:
        items:
          $ref: '#/definitions/models.Vendor'
        type: array
    type: object
  models.Order:
    properties:
      canceled:
        type: boolean
      deliveryTime:
        type: string
      deliveryType:
        type: string
      orderID:
        type: integer
      orderTime:
        type: string
      totalPrice:
        type: number
    type: object
  models.Role:
    properties:
      role:
        type: string
      roleID:
        type: integer
    type: object
  models.User:
    properties:
      address:
        type: string
      email:
        type: string
      isDeleted:
        type: boolean
      name:
        type: string
      passwordHash:
        type: string
      phone:
        type: string
      role:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      userID:
        type: integer
    type: object
  models.Vendor:
    properties:
      address:
        type: string
      inn:
        type: string
      isDeleted:
        type: boolean
      ogrn:
        type: string
      orgName:
        type: string
      phone:
        type: string
      vendorID:
        type: integer
    type: object
info:
  contact: {}
paths:
  /employees/:
    get:
      description: Returns list of employees
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Get all employees
      tags:
      - employees
  /employees/create:
    post:
      consumes:
      - application/json
      description: Creates a employees
      parameters:
      - description: Employee details
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/models.Employee'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Create employee
      tags:
      - employees
  /employees/delete/:
    post:
      consumes:
      - application/json
      description: Deletes employees
      parameters:
      - description: Employee IDs
        in: body
        name: ids
        required: true
        schema:
          $ref: '#/definitions/dtos.MultiID'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Delete employees
      tags:
      - employees
  /employees/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a employees
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Delete a employee
      tags:
      - employees
  /employees/show/{id}:
    get:
      description: Returns one employee
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Get one employee
      tags:
      - employees
  /employees/update/{id}:
    put:
      consumes:
      - application/json
      description: Updates a employees
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Employee details
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/models.Employee'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Update a employee
      tags:
      - employees
  /features/:
    get:
      description: Returns list of features
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Get all features
      tags:
      - features
  /features/create:
    post:
      consumes:
      - application/json
      description: Creates a features
      parameters:
      - description: Feature details
        in: body
        name: feature
        required: true
        schema:
          $ref: '#/definitions/models.Feature'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Create feature
      tags:
      - features
  /features/delete/:
    post:
      consumes:
      - application/json
      description: Deletes features
      parameters:
      - description: Feature IDs
        in: body
        name: ids
        required: true
        schema:
          $ref: '#/definitions/dtos.MultiID'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Delete features
      tags:
      - features
  /features/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a features
      parameters:
      - description: Feature ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Delete a feature
      tags:
      - features
  /features/show/{id}:
    get:
      description: Returns one feature
      parameters:
      - description: Feature ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Get one feature
      tags:
      - features
  /features/update/{id}:
    put:
      consumes:
      - application/json
      description: Updates a features
      parameters:
      - description: Feature ID
        in: path
        name: id
        required: true
        type: string
      - description: Feature details
        in: body
        name: feature
        required: true
        schema:
          $ref: '#/definitions/models.Feature'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Update a feature
      tags:
      - features
  /goods/:
    get:
      description: Returns list of goods
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Get all goods
      tags:
      - goods
  /goods/create:
    post:
      consumes:
      - application/json
      description: Creates a goods
      parameters:
      - description: Good details
        in: body
        name: good
        required: true
        schema:
          $ref: '#/definitions/models.Good'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Create good
      tags:
      - goods
  /goods/delete/:
    post:
      consumes:
      - application/json
      description: Deletes goods
      parameters:
      - description: Good IDs
        in: body
        name: ids
        required: true
        schema:
          $ref: '#/definitions/dtos.MultiID'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Delete goods
      tags:
      - goods
  /goods/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a goods
      parameters:
      - description: Good ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Delete a good
      tags:
      - goods
  /goods/show/{id}:
    get:
      description: Returns one good
      parameters:
      - description: Good ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Get one good
      tags:
      - goods
  /goods/update/{id}:
    put:
      consumes:
      - application/json
      description: Updates a goods
      parameters:
      - description: Good ID
        in: path
        name: id
        required: true
        type: string
      - description: Good details
        in: body
        name: good
        required: true
        schema:
          $ref: '#/definitions/models.Good'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Update a good
      tags:
      - goods
  /orders/:
    get:
      description: Returns list of orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Get all orders
      tags:
      - orders
  /orders/create:
    post:
      consumes:
      - application/json
      description: Creates a orders
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Create order
      tags:
      - orders
  /orders/delete/:
    post:
      consumes:
      - application/json
      description: Deletes orders
      parameters:
      - description: Order IDs
        in: body
        name: ids
        required: true
        schema:
          $ref: '#/definitions/dtos.MultiID'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Delete orders
      tags:
      - orders
  /orders/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a orders
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Delete a order
      tags:
      - orders
  /orders/show/{id}:
    get:
      description: Returns one order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Get one order
      tags:
      - orders
  /orders/update/{id}:
    put:
      consumes:
      - application/json
      description: Updates a orders
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Update a order
      tags:
      - orders
  /users/:
    get:
      description: Returns list of users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Get all users
      tags:
      - users
  /users/create:
    post:
      consumes:
      - application/json
      description: Creates a users
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Create user
      tags:
      - users
  /users/delete/:
    post:
      consumes:
      - application/json
      description: Deletes users
      parameters:
      - description: User IDs
        in: body
        name: ids
        required: true
        schema:
          $ref: '#/definitions/dtos.MultiID'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Delete users
      tags:
      - users
  /users/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a users
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Delete a user
      tags:
      - users
  /users/show/{id}:
    get:
      description: Returns one user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Get one user
      tags:
      - users
  /users/update/{id}:
    put:
      consumes:
      - application/json
      description: Updates a users
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Update a user
      tags:
      - users
  /vendors/:
    get:
      description: Returns list of vendors
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Get all vendors
      tags:
      - vendors
  /vendors/create:
    post:
      consumes:
      - application/json
      description: Creates a vendors
      parameters:
      - description: Vendor details
        in: body
        name: vendor
        required: true
        schema:
          $ref: '#/definitions/models.Vendor'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Create vendor
      tags:
      - vendors
  /vendors/delete/:
    post:
      consumes:
      - application/json
      description: Deletes vendors
      parameters:
      - description: Vendor IDs
        in: body
        name: ids
        required: true
        schema:
          $ref: '#/definitions/dtos.MultiID'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Delete vendors
      tags:
      - vendors
  /vendors/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a vendors
      parameters:
      - description: Vendor ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Delete a vendor
      tags:
      - vendors
  /vendors/show/{id}:
    get:
      description: Returns one vendor
      parameters:
      - description: Vendor ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Get one vendor
      tags:
      - vendors
  /vendors/update/{id}:
    put:
      consumes:
      - application/json
      description: Updates a vendors
      parameters:
      - description: Vendor ID
        in: path
        name: id
        required: true
        type: string
      - description: Vendor details
        in: body
        name: vendor
        required: true
        schema:
          $ref: '#/definitions/models.Vendor'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.Response'
      summary: Update a vendor
      tags:
      - vendors
swagger: "2.0"
